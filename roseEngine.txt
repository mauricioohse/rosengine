Claude instructions
This is the documentation for my work in progress engine for 2D games. It is called RoseEngine. It will be a description of the whole project, and at the end I have specific instructions for you

Framework
Targets: Windows, web
Language: C++ without STL
Compiler: g++ for windows, emscripten for web build
Libraries: SDL2

Introduction
My first full on game was cuckoo launch, a game written entirely in cpp without STL using SDL2. The game was written all in one file, with the idea of making things quick for a game jam. Now, I want to take the lessons of that code and create a template/engine for future games. Here are some of the capabilities of the proto-engine in cuckoo launch:

Static window opening and drawing
Loading png and wav files
Keyboard and mouse inputs
Drawing simple shapes with SDL
Semi-abstract game objects
Background
Sound and music
Sprite animation
Camera movement
Static window size
60 fps frame cap 
Text file handling for score saving (both web with abstract browser file system and windows with file system)
TTF text printing on screen
AABB collision
Bouncing, gravity
Launching
Dynamic sprite loading
Compiling to windows, both debug and release
Compiling to web with emscripten

Lessons learned
In cuckoo launch, I made a lot of shortcuts. Some things that I would like to consider for RoseEngine:
GameObject was a poorly abstracted object, as all objects contained information of other types of object that they didnt need. For example, all objects had “SquirrelType”, although not all objects are squirrel
Some global variables should have beens attached to a specific object. For example, instead of having the “eggIsHeld” variable inside egg object, it was a global variable
Everything done in one file - making it very hard to port to different games.
Constants of all objects defined in the top of the file, while it probably should have been defined near the object definition
The sprite animation handling code is spaghetti code with different logic for every object, should have created a more smart way of handling that
No way to load the game data (for example a level data) from a text file. It was all generated by rand functions that made hard to handpick game object positions
Did not consider frame length on physics, game runs poorly if frame rate is lower than 60.
Had one squirrel object that was different from all other squirrel objects, which caused duplicated code



RoseEngine goals
RoseEngine is supposed to be a simple 2D SDL2 game engine. It should have the capability of supporting simple 2D games, being flexible and allowing logic to be written without changing the main engine code.

RoseEngine will use data driven procedural approach to coding. Here an overview of what I mean:

// Core engine components as minimal structs with functions
struct Window {
    void (*init)(int width, int height);
    void (*render)();
    // ... other window-related functions
};


// Component-based entities
struct Entity {
    uint32_t id;
    // Components stored as bit flags
    uint32_t components;
    // Actual component data stored in separate arrays
};


// Components as simple data structures
struct Transform {
    float x, y;
    float rotation;
    float scale;
};


struct Sprite {
    SDL_Texture* texture;
    int currentFrame;
    int totalFrames;
};


// Systems that operate on components
void UpdatePhysics(float deltaTime, Entity* entities, Transform* transforms);
void RenderSprites(Entity* entities, Transform* transforms, Sprite* sprites);




Below the features, in order of importance:
Window management
Main loop compatible with windows and web builds
Capped framerate
Loading images
Simple object
Resource management
How to handle creation of objects in a smart way?
Adding similar capabilities to different objects
Text handling using sdl2_ttf
Main menu
Multiple game scenes
Basic physics
Player movement with wasd
Gravity
Jumping
Collision detection
Camera movement following the player
Loading objects from a csv file
Loading scenes from csv file
