Game Summary
Porcupine Arena is a top-down physics-based arena fighter where the player controls a porcupine that can only move by shooting quills (recoil-based movement). The player battles against different types of balloon enemies while trying to stay within a circular icy arena. The game features a knockback percentage system similar to Super Smash Bros.
ECS Components Needed
Transform Component
Position
Rotation
Scale
Physics Component
Velocity
Friction (for ice physics)
Mass
Knockback percentage
Health Component
Current health
Knockback multiplier
Damage percentage
Shooter Component
Fire rate
Projectile type
Last shot time
Projectile Component
Damage
Speed
Lifetime
Owner entity
AI Component
Behavior type (for different balloon types)
Target position
Movement pattern
Systems Needed
Physics System
Handle ice physics/sliding
Apply forces and velocities
Handle knockback
Combat System
Manage projectile collisions
Handle damage and knockback calculations
Process balloon explosions
Input System
Handle mouse input for shooting
Calculate shooting direction
AI System
Control balloon movement patterns
Manage balloon attack patterns
Handle enemy spawning
Arena System
Check arena boundaries
Handle out-of-bounds conditions
Camera System
Follow porcupine with smooth delay
Handle screen shake effects
Development Milestones
Milestone 1: Core Mechanics (2 weeks)
[x] Set up basic ECS architecture
[ ] Implement ice physics system
[ ] Create circular arena with boundaries
[ ] Add basic porcupine movement and shooting mechanics
[ ] Implement camera following system
Milestone 2: Combat System (2 weeks)
[ ] Add projectile system
[ ] Implement knockback mechanics
[ ] Create health/damage percentage system
[ ] Add collision detection
[ ] Implement basic particle effects
Milestone 3: Enemy System (2 weeks)
[ ] Create base balloon enemy class
[ ] Implement red balloon behavior
[ ] Add green balloon with laser projectiles
[ ] Implement blue balloon with aimed shots
[ ] Create enemy spawning system
Milestone 4: Polish & Balance (1 week)
[ ] Add sound effects and music
[ ] Implement visual feedback (hit effects, explosions)
[ ] Balance enemy spawn rates and difficulty
[ ] Add score system
[ ] Create game over condition and restart
Milestone 5: Final Polish (1 week)
[ ] Add menu system
[ ] Implement difficulty progression
[ ] Add visual polish (backgrounds, effects)
[ ] Bug fixing and performance optimization
[ ] Game feel improvements
